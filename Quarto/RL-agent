import numpy as np
import copy

class MinimaxPlayer(Player):

    def __init__(self, quarto) -> None:
        super().__init__(quarto)

    def choose_piece(self) -> int:
        self.__best_piece = -1
        _, self.__best_piece = self.minimax(self.__quarto, True)
        return self.__best_piece

    def place_piece(self) -> tuple[int, int]:
        self.__best_x = -1
        self.__best_y = -1
        _, self.__best_x, self.__best_y = self.minimax(self.__quarto, False)
        return self.__best_x, self.__best_y

    def minimax(self, game, isMaximizing):
        if game.is_game_over():
            return game.evaluate(), -1, -1

        if isMaximizing:
            bestVal = -np.inf
            piece = -1
            for i in range(16):
                if i not in game.get_board_status():
                    game_copy = copy.deepcopy(game)
                    if game_copy.select(i):
                        val, _, _ = self.minimax(game_copy, False)
                        if val > bestVal:
                            bestVal = val
                            piece = i
            return bestVal, piece

        else:
            bestVal = np.inf
            x = -1
            y = -1
            for i in range(4):
                for j in range(4):
                    if game.__placeable(i, j):
                        game_copy = copy.deepcopy(game)
                        game_copy.place(i, j)
                        if game_copy.is_game_over():
                            return game_copy.evaluate(), -1, -1
                        val, _, _ = self.minimax(game_copy, True)
                        if val < bestVal:
                            bestVal = val
                            x = i
                            y = j
            return bestVal, x, y
